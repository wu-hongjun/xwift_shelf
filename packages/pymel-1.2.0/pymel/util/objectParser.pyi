from pymel.util.arguments import *
from pymel.util.utilitytypes import *
from .common import capitalize as capitalize, uncapitalize as uncapitalize
from typing import Any, Optional

def verbose(): ...
def currentfn(): ...

class NameParseError(Exception): ...
class ParsingWarning(UserWarning): ...

ProxyUni: Any

class Parsed(ProxyUni):
    classes: Any = ...
    @classmethod
    def accepts(cls, other: Any): ...
    def compileName(self): ...
    @classmethod
    def getParserClass(cls, parsername: Any) -> None: ...
    @classmethod
    def classparserbuild(cls, **kwargs: Any) -> None: ...
    @classmethod
    def classparse(cls, data: Any, **kwargs: Any): ...
    @classmethod
    def classparser(cls): ...
    def parse(self, data: Any, **kwargs: Any): ...
    @property
    def parser(self): ...
    @property
    def tokens(self) -> None: ...
    @property
    def sub(self): ...
    def setSubItem(self, index: Any, value: Any) -> None: ...
    @property
    def pos(self): ...
    def isValid(self): ...
    def copy(self): ...
    def findType(self, type: Any): ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __add__(self, other: Any): ...

class Parser:
    classes: Any = ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    errorcount: int = ...
    lexer: Any = ...
    parser: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def t_error(self, t: Any) -> None: ...
    def p_error(self, p: Any) -> None: ...
    @staticmethod
    def getRulesAndTokens(parsercls: Any): ...
    def build(self, **kwargs: Any) -> None: ...
    def parse(self, data: Any, **kwargs: Any): ...

class Token(Parsed): ...

class TokenParser(Parser):
    parser: Any = ...
    def build(self, **kwargs: Any) -> None: ...
    errorcount: int = ...
    def parse(self, data: Any, **kwargs: Any): ...

class EmptyTokenParser(Parser):
    def build(self, **kwargs: Any) -> None: ...
    errorcount: int = ...
    def parse(self, data: Any, **kwargs: Any): ...

class EmptyParser(Parser):
    start: str = ...
    def p_empty(self, p: Any) -> None: ...

def isParsedClass(x: Any): ...
def isParserClass(x: Any): ...

class autoparsed(type):
    def __new__(mcl: Any, classname: Any, bases: Any, classdict: Any): ...

def process(module: Optional[Any] = ...) -> None: ...
