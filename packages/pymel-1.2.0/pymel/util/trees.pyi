from collections import *
from copy import *
from typing import Any, Optional

useNetworkx: bool
networkxLoad: bool

def isSequence(x: Any): ...
def isTree(x: Any): ...
def isImmutableTree(x: Any): ...
def isMutableTree(x: Any): ...
def mutabletree(f: Any): ...

class MetaTree(type):
    class PyTree:
        def __bool__(self): ...
        def isElement(self): ...
        def hasChilds(self): ...
        def childs(self): ...
        def siblings(self): ...
        def __iter__(self) -> Any: ...
        def __reduce__(self): ...
        def __eq__(self, other: Any) -> Any: ...
        def __ne__(self, other: Any) -> Any: ...
        def __contains__(self, element: Any): ...
        def issubtree(self, other: Any): ...
        def __getitem__(self, value: Any): ...
        def get(self, value: Any, default: Any = ...): ...
        def remove(self, element: Any) -> None: ...
        def __delitem__(self, element: Any) -> None: ...
        def add(self, element: Any, parent: Optional[Any] = ..., next: Optional[Any] = ...) -> None: ...
        def __cmp__(self, other: Any): ...
        __le__: Any = ...
        __lt__: Any = ...
        __ge__: Any = ...
        __gt__: Any = ...
        def sort(self, *args: Any) -> None: ...
        def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    class IndexedPyTree:
        def elementKey(self, element: Any) -> None: ...
        def __getitem__(self, value: Any): ...
        def get(self, value: Any, default: Any = ...): ...
    class NxTree: ...
    class ImTree:
        def preorder(self) -> None: ...
        def postorder(self) -> None: ...
        def breadth(self) -> None: ...
        def child(self, index: int = ...): ...
        def parents(self) -> None: ...
        def root(self): ...
        def tops(self) -> None: ...
        def top(self, index: int = ...): ...
        def depth(self): ...
        def leaves(self) -> None: ...
        def level(self, dist: int = ...) -> None: ...
        def size(self): ...
        __len__: Any = ...
        def height(self): ...
        def path(self, element: Optional[Any] = ..., **kwargs: Any): ...
        def dist(self, element: Any, **kwargs: Any): ...
        def formatted(self, returnList: bool = ...): ...
        def view(self) -> None: ...
        def debug(self, depth: int = ...): ...
        def copy(self, cls: Optional[Any] = ...): ...
    class MuTree:
        def __setitem__(self, element: Any, value: Any) -> None: ...
        def graft(self, element: Any, parent: Optional[Any] = ..., next: Optional[Any] = ...) -> None: ...
        def prune(self, element: Any) -> None: ...
        def pop(self, element: Any) -> None: ...
        def reroot(self, element: Any) -> None: ...
    def __new__(mcl: Any, classname: Any, bases: Any, classdict: Any): ...
    TreeType: Any = ...

class FrozenTree:
    mutable: bool = ...
    indexed: bool = ...

class Tree:
    mutable: bool = ...
    indexed: bool = ...

class IndexedFrozenTree:
    mutable: bool = ...
    indexed: bool = ...

class IndexedTree:
    mutable: bool = ...
    indexed: bool = ...

def treeFromDict(childToParentDict: Any): ...
def treeFromChildLink(isExactChildFn: Any, *args: Any): ...
def treeFromIsChild(isChildFn: Any, *elements: Any): ...
