from unittest import *
from typing import Any, Optional
from warnings import warn as warn

TEST_MAIN_FUNC_NAME: str
SUITE_FUNC_NAME: str

def doctestFriendly(func: Any): ...
def doctestobj(*args: Any, **kwargs: Any): ...
def doctestmod(*args: Any, **kwargs: Any): ...

class MayaTestRunner(TextTestRunner):
    def __init__(self, stream: Any = ..., descriptions: bool = ..., verbosity: int = ...) -> None: ...
    def run(self, *args: Any, **kwargs: Any) -> None: ...

def addFuncToModule(func: Any, module: Any) -> None: ...
def startsWithDoubleUnderscore(testcase: Any): ...
def setupUnittestModule(moduleName: Any, suiteFuncName: Any = ..., testMainName: Any = ..., filterTestCases: Any = ...): ...

class TestCaseExtended(TestCase):
    DO_NOT_LOAD: bool = ...
    def assertNoError(self, function: Any, *args: Any, **kwargs: Any) -> None: ...
    def assertIteration(self, iterable: Any, expectedResults: Any, orderMatters: bool = ..., onlyMembershipMatters: bool = ...) -> None: ...
    def assertVectorsEqual(self, v1: Any, v2: Any, places: int = ...) -> None: ...

def permutations(sequence: Any, length: Optional[Any] = ...) -> None: ...
def isOneToOne(dict: Any): ...
def isEquivalenceRelation(inputs: Any, outputs: Any, dict: Any): ...

class SuiteFromModule(TestSuite):
    moduleName: Any = ...
    module: Any = ...
    def __init__(self, module: Any, testImport: bool = ...) -> None: ...

class UnittestSuiteFromModule(SuiteFromModule):
    suiteFuncName: Any = ...
    def __init__(self, moduleName: Any, suiteFuncName: Any = ..., **kwargs: Any) -> None: ...

class DoctestSuiteFromModule(SuiteFromModule):
    alreadyRecursed: Any = ...
    packageRecurse: Any = ...
    def __init__(self, moduleName: Any, packageRecurse: bool = ..., alreadyRecursed: Optional[Any] = ..., **kwargs: Any) -> None: ...

def setCompare(iter1: Any, iter2: Any): ...
def suite(): ...
