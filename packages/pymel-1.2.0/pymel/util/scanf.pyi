from typing import Any

class CharacterBuffer:
    def getch(self) -> None: ...
    def ungetch(self, ch: Any) -> None: ...
    def scanCharacterSet(self, characterSet: Any, maxChars: int = ...): ...
    def scanPredicate(self, predicate: Any, maxChars: int = ...): ...

class CharacterBufferFromIterable(CharacterBuffer):
    iterator: Any = ...
    lastChar: str = ...
    def __init__(self, iterable: Any) -> None: ...
    def getch(self): ...
    def ungetch(self, ch: Any) -> None: ...

class CharacterBufferFromFile(CharacterBuffer):
    myfile: Any = ...
    lastPos: Any = ...
    def __init__(self, myfile: Any) -> None: ...
    def getch(self): ...
    def ungetch(self, ch: Any) -> None: ...

class CappedBuffer(CharacterBuffer):
    buffer: Any = ...
    bytesRead: int = ...
    width: Any = ...
    ignoreWhitespace: Any = ...
    def __init__(self, buffer: Any, width: Any, ignoreWhitespace: bool = ...) -> None: ...
    def getch(self): ...
    def isIgnoredChar(self, ch: Any): ...
    def ungetch(self, ch: Any) -> None: ...

class FormatError(ValueError): ...
class IncompleteCaptureError(ValueError): ...

def scanf(formatString: Any): ...
def sscanf(inputString: Any, formatString: Any): ...
def fscanf(inputFile: Any, formatString: Any): ...

class CompiledPattern:
    handlers: Any = ...
    formatString: Any = ...
    def __init__(self, handlers: Any, formatString: Any) -> None: ...
    def __call__(self, buffer: Any): ...
