from . import utilitytypes as utilitytypes
from past.builtins import cmp as cmp
from typing import Any, Optional

__author_name__: str
__author_email__: str
__date__: str
__url__: str

class EnumException(Exception):
    def __init__(self) -> None: ...

class EnumEmptyError(AssertionError, EnumException): ...

class EnumBadKeyError(TypeError, EnumException):
    key: Any = ...
    def __init__(self, key: Any) -> None: ...

class EnumImmutableError(TypeError, EnumException):
    args: Any = ...
    def __init__(self, *args: Any) -> None: ...

class EnumBadDefaultKeyError(ValueError, EnumException):
    val: Any = ...
    key: Any = ...
    def __init__(self, val: Any, key: Any) -> None: ...

class EnumValue:
    def __init__(self, enumtype: Any, index: Any, key: Any, doc: Optional[Any] = ...) -> None: ...
    enumtype: Any = ...
    key: Any = ...
    def __int__(self): ...
    index: Any = ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...

class Enum:
    def __init__(self, name: str, keys: Union[Dict[str, int], Iterable[str], Iterable[Tuple[str, int]]], **kwargs: Any) -> None: ...
    @property
    def name(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __delattr__(self, name: Any) -> None: ...
    def __len__(self): ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, value: Any) -> None: ...
    def __delitem__(self, index: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __contains__(self, value: Any): ...
    def getIndex(self, key: Any): ...
    def getKey(self, index: Any): ...
    def values(self): ...
    def itervalues(self): ...
    def keys(self): ...
EnumType = Enum

class EnumDict(utilitytypes.EquivalencePairs):
    def __init__(self, keys: Any, **kwargs: Any) -> None: ...
    def value(self, key: Any): ...
    def key(self, index: Any): ...
    def values(self): ...
    def keys(self): ...
