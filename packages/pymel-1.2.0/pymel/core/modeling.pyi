from typing import Any

def pointPosition(*args: Any, **kwargs: Any): ...
def curve(*args: Any, **kwargs: Any): ...
def surface(*args: Any, **kwargs: Any): ...

addMetadata: Any

def alignCurve(*args: Any, **kwargs: Any): ...
def alignSurface(*args: Any, **kwargs: Any): ...
def angleBetween(*args: Any, **kwargs: Any): ...

applyMetadata: Any

def arcLengthDimension(*args: Any, **kwargs: Any): ...
def arclen(*args: Any, **kwargs: Any): ...

arubaNurbsToPoly: Any

def attachCurve(*args: Any, **kwargs: Any): ...
def attachSurface(*args: Any, **kwargs: Any): ...
def bevel(*args: Any, **kwargs: Any): ...
def bevelPlus(*args: Any, **kwargs: Any): ...

bezierAnchorPreset: Any
bezierAnchorState: Any

def bezierCurveToNurbs(*args: Any, **kwargs: Any): ...

bezierInfo: Any
blend2: Any
blindDataType: Any

def boundary(*args: Any, **kwargs: Any): ...

canCreateManip: Any
changeSubdivComponentDisplayLevel: Any
changeSubdivRegion: Any

def circle(*args: Any, **kwargs: Any): ...

circularFillet: Any

def closeCurve(*args: Any, **kwargs: Any): ...
def closeSurface(*args: Any, **kwargs: Any): ...

coarsenSubdivSelectionList: Any

def cone(*args: Any, **kwargs: Any): ...

constructionHistory: Any
createSubdivRegion: Any

def curveIntersect(*args: Any, **kwargs: Any): ...

curveOnSurface: Any

def cylinder(*args: Any, **kwargs: Any): ...

dataStructure: Any

def detachCurve(*args: Any, **kwargs: Any): ...
def detachSurface(*args: Any, **kwargs: Any): ...

doubleProfileBirailSurface: Any
duplicateCurve: Any
duplicateSurface: Any

def editMetadata(*args: Any, **kwargs: Any): ...
def extendCurve(*args: Any, **kwargs: Any): ...
def extendSurface(*args: Any, **kwargs: Any): ...
def extrude(*args: Any, **kwargs: Any): ...
def filletCurve(*args: Any, **kwargs: Any): ...

filterExpand: Any

def fitBspline(*args: Any, **kwargs: Any): ...

freeFormFillet: Any
geomToBBox: Any
getMetadata: Any

def globalStitch(*args: Any, **kwargs: Any): ...
def grid(*args: Any, **kwargs: Any): ...

hardenPointCurve: Any
hasMetadata: Any
illustratorCurves: Any

def insertKnotCurve(*args: Any, **kwargs: Any): ...
def insertKnotSurface(*args: Any, **kwargs: Any): ...

intersect: Any

def loft(*args: Any, **kwargs: Any): ...

makeSingleSurface: Any
manipOptions: Any
manipPivot: Any
moveVertexAlongDirection: Any
multiProfileBirailSurface: Any
nurbsBoolean: Any
nurbsCopyUVSet: Any

def nurbsCube(*args: Any, **kwargs: Any): ...
def nurbsCurveToBezier(*args: Any, **kwargs: Any): ...

nurbsEditUV: Any

def nurbsPlane(*args: Any, **kwargs: Any): ...

nurbsSelect: Any

def nurbsSquare(*args: Any, **kwargs: Any): ...

nurbsToPoly: Any
nurbsToPolygonsPref: Any

def nurbsToSubdiv(*args: Any, **kwargs: Any): ...

nurbsToSubdivPref: Any
nurbsUVSet: Any

def offsetCurve(*args: Any, **kwargs: Any): ...

offsetCurveOnSurface: Any

def offsetSurface(*args: Any, **kwargs: Any): ...

planarSrf: Any

def plane(*args: Any, **kwargs: Any): ...

pointCurveConstraint: Any
pointOnCurve: Any
pointOnSurface: Any

def polyAppend(*args: Any, **kwargs: Any): ...
def polyAppendVertex(*args: Any, **kwargs: Any): ...

polyAutoProjection: Any
polyAverageNormal: Any

def polyAverageVertex(*args: Any, **kwargs: Any): ...
def polyBevel(*args: Any, **kwargs: Any): ...
def polyBevel3(*args: Any, **kwargs: Any): ...

polyBlendColor: Any

def polyBlindData(*args: Any, **kwargs: Any): ...
def polyBoolOp(*args: Any, **kwargs: Any): ...
def polyBridgeEdge(*args: Any, **kwargs: Any): ...
def polyCBoolOp(*args: Any, **kwargs: Any): ...

polyCacheMonitor: Any
polyCanBridgeEdge: Any
polyCheck: Any

def polyChipOff(*args: Any, **kwargs: Any): ...
def polyCircularize(*args: Any, **kwargs: Any): ...

polyCircularizeEdge: Any
polyCircularizeFace: Any

def polyClean(*args: Any, **kwargs: Any): ...

polyClipboard: Any

def polyCloseBorder(*args: Any, **kwargs: Any): ...
def polyCollapseEdge(*args: Any, **kwargs: Any): ...

polyCollapseFacet: Any
polyCollapseTweaks: Any
polyColorBlindData: Any

def polyColorDel(*args: Any, **kwargs: Any): ...
def polyColorMod(*args: Any, **kwargs: Any): ...
def polyColorPerVertex(*args: Any, **kwargs: Any): ...

polyColorSet: Any
polyCompare: Any

def polyCone(*args: Any, **kwargs: Any): ...
def polyConnectComponents(*args: Any, **kwargs: Any): ...

polyContourProjection: Any

def polyCopyUV(*args: Any, **kwargs: Any): ...
def polyCrease(*args: Any, **kwargs: Any): ...

polyCreateFacet: Any

def polyCube(*args: Any, **kwargs: Any): ...
def polyCut(*args: Any, **kwargs: Any): ...
def polyCylinder(*args: Any, **kwargs: Any): ...

polyCylindricalProjection: Any

def polyDelEdge(*args: Any, **kwargs: Any): ...
def polyDelFacet(*args: Any, **kwargs: Any): ...
def polyDelVertex(*args: Any, **kwargs: Any): ...

polyDuplicateAndConnect: Any

def polyDuplicateEdge(*args: Any, **kwargs: Any): ...
def polyEditEdgeFlow(*args: Any, **kwargs: Any): ...

polyEditUV: Any
polyEditUVShell: Any
polyEvaluate: Any

def polyExtrudeEdge(*args: Any, **kwargs: Any): ...

polyExtrudeFacet: Any

def polyExtrudeVertex(*args: Any, **kwargs: Any): ...
def polyFlipEdge(*args: Any, **kwargs: Any): ...
def polyFlipUV(*args: Any, **kwargs: Any): ...

polyForceUV: Any
polyGeoSampler: Any

def polyHelix(*args: Any, **kwargs: Any): ...

polyHole: Any
polyInfo: Any

def polyInstallAction(*args: Any, **kwargs: Any): ...
def polyLayoutUV(*args: Any, **kwargs: Any): ...

polyListComponentConversion: Any

def polyMapCut(*args: Any, **kwargs: Any): ...
def polyMapDel(*args: Any, **kwargs: Any): ...
def polyMapSew(*args: Any, **kwargs: Any): ...
def polyMapSewMove(*args: Any, **kwargs: Any): ...
def polyMergeEdge(*args: Any, **kwargs: Any): ...

polyMergeFacet: Any

def polyMergeUV(*args: Any, **kwargs: Any): ...

polyMergeVertex: Any
polyMirrorFace: Any

def polyMoveEdge(*args: Any, **kwargs: Any): ...

polyMoveFacet: Any

def polyMoveFacetUV(*args: Any, **kwargs: Any): ...
def polyMoveUV(*args: Any, **kwargs: Any): ...
def polyMoveVertex(*args: Any, **kwargs: Any): ...

polyMultiLayoutUV: Any

def polyNormal(*args: Any, **kwargs: Any): ...
def polyNormalPerVertex(*args: Any, **kwargs: Any): ...
def polyNormalizeUV(*args: Any, **kwargs: Any): ...
def polyOptUvs(*args: Any, **kwargs: Any): ...

polyOptions: Any
polyOutput: Any

def polyPinUV(*args: Any, **kwargs: Any): ...
def polyPipe(*args: Any, **kwargs: Any): ...

polyPlanarProjection: Any

def polyPlane(*args: Any, **kwargs: Any): ...
def polyPlatonicSolid(*args: Any, **kwargs: Any): ...
def polyPoke(*args: Any, **kwargs: Any): ...
def polyPrimitive(*args: Any, **kwargs: Any): ...
def polyPrism(*args: Any, **kwargs: Any): ...
def polyProjectCurve(*args: Any, **kwargs: Any): ...

polyProjection: Any

def polyPyramid(*args: Any, **kwargs: Any): ...
def polyQuad(*args: Any, **kwargs: Any): ...

polyQueryBlindData: Any

def polyReduce(*args: Any, **kwargs: Any): ...
def polyRemesh(*args: Any, **kwargs: Any): ...
def polyRetopo(*args: Any, **kwargs: Any): ...

polySelect: Any
polySelectConstraint: Any

def polySelectConstraintMonitor(*args: Any, **kwargs: Any): ...
def polySeparate(*args: Any, **kwargs: Any): ...

polySetToFaceNormal: Any

def polySewEdge(*args: Any, **kwargs: Any): ...

polySlideEdge: Any

def polySmooth(*args: Any, **kwargs: Any): ...
def polySoftEdge(*args: Any, **kwargs: Any): ...
def polySphere(*args: Any, **kwargs: Any): ...

polySphericalProjection: Any

def polySplit(*args: Any, **kwargs: Any): ...
def polySplitEdge(*args: Any, **kwargs: Any): ...
def polySplitRing(*args: Any, **kwargs: Any): ...

polySplitVertex: Any

def polyStraightenUVBorder(*args: Any, **kwargs: Any): ...

polySubdivideEdge: Any
polySubdivideFacet: Any

def polyToSubdiv(*args: Any, **kwargs: Any): ...
def polyTorus(*args: Any, **kwargs: Any): ...
def polyTransfer(*args: Any, **kwargs: Any): ...
def polyTriangulate(*args: Any, **kwargs: Any): ...

polyUVCoverage: Any
polyUVOverlap: Any

def polyUVRectangle(*args: Any, **kwargs: Any): ...

polyUVSet: Any
polyUVStackSimilarShells: Any

def polyUnite(*args: Any, **kwargs: Any): ...
def polyWedgeFace(*args: Any, **kwargs: Any): ...
def projectCurve(*args: Any, **kwargs: Any): ...
def projectTangent(*args: Any, **kwargs: Any): ...

propMove: Any
querySubdiv: Any

def rebuildCurve(*args: Any, **kwargs: Any): ...
def rebuildSurface(*args: Any, **kwargs: Any): ...

refineSubdivSelectionList: Any

def reverseCurve(*args: Any, **kwargs: Any): ...
def reverseSurface(*args: Any, **kwargs: Any): ...
def revolve(*args: Any, **kwargs: Any): ...
def roundConstantRadius(*args: Any, **kwargs: Any): ...

setXformManip: Any
showMetadata: Any
singleProfileBirailSurface: Any

def smoothCurve(*args: Any, **kwargs: Any): ...

smoothTangentSurface: Any

def sphere(*args: Any, **kwargs: Any): ...

squareSurface: Any
stitchSurface: Any
stitchSurfacePoints: Any
subdAutoProjection: Any

def subdCleanTopology(*args: Any, **kwargs: Any): ...

subdCollapse: Any
subdDuplicateAndConnect: Any
subdEditUV: Any

def subdLayoutUV(*args: Any, **kwargs: Any): ...

subdListComponentConversion: Any

def subdMapCut(*args: Any, **kwargs: Any): ...
def subdMapSewMove(*args: Any, **kwargs: Any): ...

subdMatchTopology: Any
subdMirror: Any
subdPlanarProjection: Any
subdToBlind: Any
subdToPoly: Any
subdTransferUVsToCache: Any

def subdiv(*args: Any, **kwargs: Any): ...

subdivCrease: Any
subdivDisplaySmoothness: Any
textCurves: Any
tolerance: Any

def torus(*args: Any, **kwargs: Any): ...
def transferAttributes(*args: Any, **kwargs: Any): ...

transferShadingSets: Any

def trim(*args: Any, **kwargs: Any): ...

unfold: Any
untangleUV: Any

def untrim(*args: Any, **kwargs: Any): ...

uvSnapshot: Any
