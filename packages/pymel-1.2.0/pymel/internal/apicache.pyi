from . import startup as startup
from pymel.api.plugins import mpxNamesToApiEnumNames as mpxNamesToApiEnumNames
from typing import Any, Optional

class ApiEnum(tuple):
    def pymelName(self): ...

class GhostObjsOkHere:
    @classmethod
    def OK(cls): ...
    oldOK: Any = ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class InvalidNodeTypeError(Exception): ...
class ManipNodeTypeError(InvalidNodeTypeError): ...

class _GhostObjMaker:
    multi: Any = ...
    mayaTypes: Any = ...
    dagMod: Any = ...
    dgMod: Any = ...
    dagGhosts: bool = ...
    dgGhosts: bool = ...
    manipError: Any = ...
    byMayaType: Any = ...
    ghosts: Any = ...
    def __init__(self, mayaTypes: Any, dagMod: Optional[Any] = ..., dgMod: Optional[Any] = ..., manipError: bool = ..., multi: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

def isPluginNode(nodeName: Any): ...
def getInheritance(mayaType: Any, checkManip3D: bool = ..., checkCache: bool = ..., updateCache: bool = ...): ...
def nodeToApiName(nodeName: Any): ...
def getLowerCaseMapping(names: Any): ...

API_NAME_MODIFIERS: Any
apiSuffixes: Any

class BaseApiClassInfoCache(startup.SubItemCache):
    CLASSINFO_SUBCACHE_NAME: Any = ...
    def fromRawData(self, data: Any): ...
    def toRawData(self, data: Any): ...

class ApiMelBridgeCache(BaseApiClassInfoCache):
    NAME: str = ...
    DESC: str = ...
    USE_VERSION: bool = ...
    CLASSINFO_SUBCACHE_NAME: str = ...
    def rebuild(self) -> None: ...
    @classmethod
    def stripComments(cls, sourcelines: Any): ...
    @classmethod
    def applyComments(cls, origText: Any, origTextNoComments: Any, newPath: Any): ...
    def write(self, data: Any, ext: Optional[Any] = ...): ...

class ApiCache(BaseApiClassInfoCache):
    NAME: str = ...
    DESC: str = ...
    USE_VERSION: bool = ...
    CLASSINFO_SUBCACHE_NAME: str = ...
    EXTRA_GLOBAL_NAMES: Any = ...
    CRASH_TYPES: Any = ...
    MAYA_TO_API_OVERRIDES: Any = ...
    MFN_TO_API_OVERRIDES: Any = ...
    API_TO_MFN_OVERRIDES: Any = ...
    DEFAULT_API_TYPE: str = ...
    @classmethod
    def allVersions(cls, allowEmpty: bool = ...): ...
    docLocation: Any = ...
    strict: Any = ...
    def __init__(self, docLocation: Optional[Any] = ..., strict: Optional[Any] = ...) -> None: ...
    def fromRawData(self, data: Any): ...
    def toRawData(self, data: Any): ...
    def getMfnClsToApiEnum(self, mfnCls: Any): ...
    def getApiEnumToApiType(self, enumInt: Any): ...
    def getMfnClsToApiType(self, mfnCls: Any): ...
    def addMayaType(self, mayaType: Any, apiType: Any, updateObj: Optional[Any] = ...) -> None: ...
    def removeMayaType(self, mayaType: Any, updateObj: Optional[Any] = ...) -> None: ...
    def mayaTypeToApiType(self, mayaType: Any, useCache: bool = ..., ghostObjs: bool = ...): ...
    def filterPluginNodes(self) -> None: ...
    def rebuild(self) -> None: ...
    def melBridgeContents(self): ...
    def extraDicts(self): ...
