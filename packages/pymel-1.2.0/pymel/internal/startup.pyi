import pprint
from . import plogging as plogging
from collections import namedtuple
from pymel.mayautils import getUserPrefsDir as getUserPrefsDir
from pymel.util import picklezip as picklezip, refreshEnviron as refreshEnviron, shellOutput as shellOutput, subpackages as subpackages, universalmethod as universalmethod
from pymel.versions import installName as installName, shortName as shortName
from typing import Any, Optional

isInitializing: bool
finalizeEnabled: bool

def mayaStartupHasRun(): ...
def mayaStartupHasStarted(): ...
def setupFormatting(): ...
def mayaInit(forversion: Optional[Any] = ...): ...
def initMEL() -> None: ...
def initAE(): ...
def finalize() -> None: ...
def fixMayapySegFault() -> None: ...
def fixMayapy2011SegFault() -> None: ...
def encodeFix() -> None: ...
def getImportableObject(importableName: Any): ...
def getImportableName(obj: Any): ...

PY_CACHE_FORMAT_VERSION: Any

class NoStringWrappingPrettyPrinter(pprint.PrettyPrinter): ...

py_pformat: Any

CacheFormat = namedtuple('CacheFormat', ['ext', 'reader', 'writer'])

class PymelCache:
    NAME: str = ...
    DESC: str = ...
    FORMATS: Any = ...
    EXTENSIONS: Any = ...
    DEFAULT_EXT: str = ...
    USE_VERSION: bool = ...
    def fromRawData(self, rawData: Any): ...
    def toRawData(self, data: Any): ...
    def read(self, path: Optional[Any] = ..., ext: Optional[Any] = ..., ignoreError: bool = ...): ...
    def write(self, data: Any, path: Optional[Any] = ..., ext: Optional[Any] = ..., ignoreError: bool = ...) -> None: ...
    def path(self, version: Optional[Any] = ..., ext: Optional[Any] = ...): ...
    @classmethod
    def allVersions(cls, allowEmpty: bool = ...): ...

class SubItemCache(PymelCache):
    ITEM_TYPES: Any = ...
    DEFAULT_TYPE: Any = ...
    AUTO_SAVE: bool = ...
    def __init__(self) -> None: ...
    @classmethod
    def cacheNames(cls): ...
    @classmethod
    def itemType(cls, name: Any): ...
    @classmethod
    def itemIndex(cls, name: Any): ...
    def initVal(self, name: Any) -> None: ...
    def build(self) -> None: ...
    def rebuild(self) -> None: ...
    def update(self, obj: Any, cacheNames: Optional[Any] = ...) -> None: ...
    def load(self): ...
    def save(self, obj: Optional[Any] = ..., ext: Optional[Any] = ...) -> None: ...
    def contents(self): ...

def getConfigFile(): ...
def parsePymelConfig(): ...

pymel_options: Any
